<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="polkit-polkit-policy-cache">
<refmeta>
<refentrytitle role="top_of_page" id="polkit-polkit-policy-cache.top_of_page">Policy Cache</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>POLKIT Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Policy Cache</refname>
<refpurpose>Holds the actions defined on the system.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="polkit-polkit-policy-cache.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="PolKitPolicyCache">PolKitPolicyCache</link>;
<link linkend="polkit-bool-t">polkit_bool_t</link>       (<link linkend="PolKitPolicyCacheForeachFunc">*PolKitPolicyCacheForeachFunc</link>)     (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         <link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link> *entry,
                                                         <link linkend="void">void</link> *user_data);
<link linkend="PolKitPolicyCache">PolKitPolicyCache</link>*  <link linkend="polkit-policy-cache-ref">polkit_policy_cache_ref</link>             (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache);
<link linkend="void">void</link>                <link linkend="polkit-policy-cache-unref">polkit_policy_cache_unref</link>           (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache);
<link linkend="void">void</link>                <link linkend="polkit-policy-cache-debug">polkit_policy_cache_debug</link>           (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache);
<link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link>* <link linkend="polkit-policy-cache-get-entry">polkit_policy_cache_get_entry</link>    (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         <link linkend="PolKitAction">PolKitAction</link> *action);
<link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link>* <link linkend="polkit-policy-cache-get-entry-by-id">polkit_policy_cache_get_entry_by_id</link>
                                                        (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         const <link linkend="char">char</link> *action_id);
<link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link>* <link linkend="polkit-policy-cache-get-entry-by-annotation">polkit_policy_cache_get_entry_by_annotation</link>
                                                        (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         const <link linkend="char">char</link> *annotation_key,
                                                         const <link linkend="char">char</link> *annotation_value);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-policy-cache-foreach">polkit_policy_cache_foreach</link>         (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         <link linkend="PolKitPolicyCacheForeachFunc">PolKitPolicyCacheForeachFunc</link> callback,
                                                         <link linkend="void">void</link> *user_data);
</synopsis>
</refsynopsisdiv>









<refsect1 id="polkit-polkit-policy-cache.description" role="desc">
<title role="desc.title">Description</title>
<para>
This class is used to hold all policy objects (stemming from policy
files) and provide look-up functions.</para>
<para>

</para>
</refsect1>

<refsect1 id="polkit-polkit-policy-cache.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="PolKitPolicyCache" role="struct">
<title>PolKitPolicyCache</title>
<indexterm zone="PolKitPolicyCache"><primary>PolKitPolicyCache</primary></indexterm><programlisting>typedef struct _PolKitPolicyCache PolKitPolicyCache;</programlisting>
<para>
Instances of this class are used to hold all policy objects
(stemming from policy files) and provide look-up functions.</para>
<para>

</para></refsect2>
<refsect2 id="PolKitPolicyCacheForeachFunc" role="function">
<title>PolKitPolicyCacheForeachFunc ()</title>
<indexterm zone="PolKitPolicyCacheForeachFunc"><primary>PolKitPolicyCacheForeachFunc</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       (*PolKitPolicyCacheForeachFunc)     (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         <link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link> *entry,
                                                         <link linkend="void">void</link> *user_data);</programlisting>
<para>
Callback function for <link linkend="polkit-policy-cache-foreach"><function>polkit_policy_cache_foreach()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the policy cache
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>entry</parameter>&nbsp;:</term>
<listitem><simpara> an entry in the cache - do not unref
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data passed to <link linkend="polkit-policy-cache-foreach"><function>polkit_policy_cache_foreach()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> to short-circuit; e.g. stop the iteration
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-policy-cache-ref" role="function">
<title>polkit_policy_cache_ref ()</title>
<indexterm zone="polkit-policy-cache-ref"><primary>polkit_policy_cache_ref</primary></indexterm><programlisting><link linkend="PolKitPolicyCache">PolKitPolicyCache</link>*  polkit_policy_cache_ref             (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache);</programlisting>
<para>
Increase reference count.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the policy cache object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-policy-cache-unref" role="function">
<title>polkit_policy_cache_unref ()</title>
<indexterm zone="polkit-policy-cache-unref"><primary>polkit_policy_cache_unref</primary></indexterm><programlisting><link linkend="void">void</link>                polkit_policy_cache_unref           (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache);</programlisting>
<para>
Decreases the reference count of the object. If it becomes zero,
the object is freed. Before freeing, reference counts on embedded
objects are decresed by one.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the policy cache object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-policy-cache-debug" role="function">
<title>polkit_policy_cache_debug ()</title>
<indexterm zone="polkit-policy-cache-debug"><primary>polkit_policy_cache_debug</primary></indexterm><programlisting><link linkend="void">void</link>                polkit_policy_cache_debug           (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache);</programlisting>
<para>
Print debug information about object</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the cache
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-policy-cache-get-entry" role="function">
<title>polkit_policy_cache_get_entry ()</title>
<indexterm zone="polkit-policy-cache-get-entry"><primary>polkit_policy_cache_get_entry</primary></indexterm><programlisting><link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link>* polkit_policy_cache_get_entry    (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         <link linkend="PolKitAction">PolKitAction</link> *action);</programlisting>
<para>
Given a action, find the object describing the definition of the
policy; e.g. data stemming from files in
/usr/share/PolicyKit/policy.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the cache
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action</parameter>&nbsp;:</term>
<listitem><simpara> the action
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="PolKitPolicyFileEntry"><type>PolKitPolicyFileEntry</type></link> entry on sucess; otherwise
<link linkend="NULL:CAPS"><type>NULL</type></link> if the action wasn't identified. Caller shall not unref
this object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-policy-cache-get-entry-by-id" role="function">
<title>polkit_policy_cache_get_entry_by_id ()</title>
<indexterm zone="polkit-policy-cache-get-entry-by-id"><primary>polkit_policy_cache_get_entry_by_id</primary></indexterm><programlisting><link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link>* polkit_policy_cache_get_entry_by_id
                                                        (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         const <link linkend="char">char</link> *action_id);</programlisting>
<para>
Given a action identifier, find the object describing the
definition of the policy; e.g. data stemming from files in
/usr/share/PolicyKit/policy.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the cache
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>action_id</parameter>&nbsp;:</term>
<listitem><simpara> the action identifier
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="PolKitPolicyFileEntry"><type>PolKitPolicyFileEntry</type></link> entry on sucess; otherwise
<link linkend="NULL:CAPS"><type>NULL</type></link> if the action wasn't identified. Caller shall not unref
this object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-policy-cache-get-entry-by-annotation" role="function" condition="since:0.7">
<title>polkit_policy_cache_get_entry_by_annotation ()</title>
<indexterm zone="polkit-policy-cache-get-entry-by-annotation" role="0.7"><primary>polkit_policy_cache_get_entry_by_annotation</primary></indexterm><programlisting><link linkend="PolKitPolicyFileEntry">PolKitPolicyFileEntry</link>* polkit_policy_cache_get_entry_by_annotation
                                                        (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         const <link linkend="char">char</link> *annotation_key,
                                                         const <link linkend="char">char</link> *annotation_value);</programlisting>
<para>
Find the first policy file entry where a given annotation matches a
given value. Note that there is nothing preventing the existence of
multiple policy file entries matching this criteria; it would
however be a packaging bug if this situation occured.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the policy cache
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>annotation_key</parameter>&nbsp;:</term>
<listitem><simpara> the key to check for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>annotation_value</parameter>&nbsp;:</term>
<listitem><simpara> the value to check for
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The first <link linkend="PolKitPolicyFileEntry"><type>PolKitPolicyFileEntry</type></link> matching the search
criteria. The caller shall not unref this object. Returns <link linkend="NULL:CAPS"><type>NULL</type></link> if
there are no policy file entries matching the search criteria.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-policy-cache-foreach" role="function">
<title>polkit_policy_cache_foreach ()</title>
<indexterm zone="polkit-policy-cache-foreach"><primary>polkit_policy_cache_foreach</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_policy_cache_foreach         (<link linkend="PolKitPolicyCache">PolKitPolicyCache</link> *policy_cache,
                                                         <link linkend="PolKitPolicyCacheForeachFunc">PolKitPolicyCacheForeachFunc</link> callback,
                                                         <link linkend="void">void</link> *user_data);</programlisting>
<para>
Visit all entries in the policy cache.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>policy_cache</parameter>&nbsp;:</term>
<listitem><simpara> the policy cache
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&nbsp;:</term>
<listitem><simpara> callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data to pass to callback function
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> only if iteration was short-circuited
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
