<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="polkit-polkit-dbus">
<refmeta>
<refentrytitle role="top_of_page" id="polkit-polkit-dbus.top_of_page">Caller Determination</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>POLKIT Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Caller Determination</refname>
<refpurpose>Obtaining seat, session and caller information
via D-Bus and ConsoleKit.</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="polkit-polkit-dbus.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="PolKitSession">PolKitSession</link>*      <link linkend="polkit-session-new-from-objpath">polkit_session_new_from_objpath</link>     (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         const <link linkend="char">char</link> *objpath,
                                                         <link linkend="uid-t">uid_t</link> uid,
                                                         <link linkend="DBusError">DBusError</link> *error);
<link linkend="PolKitSession">PolKitSession</link>*      <link linkend="polkit-session-new-from-cookie">polkit_session_new_from_cookie</link>      (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         const <link linkend="char">char</link> *cookie,
                                                         <link linkend="DBusError">DBusError</link> *error);
<link linkend="PolKitCaller">PolKitCaller</link>*       <link linkend="polkit-caller-new-from-dbus-name">polkit_caller_new_from_dbus_name</link>    (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         const <link linkend="char">char</link> *dbus_name,
                                                         <link linkend="DBusError">DBusError</link> *error);
<link linkend="PolKitCaller">PolKitCaller</link>*       <link linkend="polkit-caller-new-from-pid">polkit_caller_new_from_pid</link>          (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         <link linkend="pid-t">pid_t</link> pid,
                                                         <link linkend="DBusError">DBusError</link> *error);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-is-authorization-relevant">polkit_is_authorization_relevant</link>    (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         <link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="DBusError">DBusError</link> *error);
                    <link linkend="PolKitTracker">PolKitTracker</link>;
<link linkend="PolKitTracker">PolKitTracker</link>*      <link linkend="polkit-tracker-new">polkit_tracker_new</link>                  (void);
<link linkend="PolKitTracker">PolKitTracker</link>*      <link linkend="polkit-tracker-ref">polkit_tracker_ref</link>                  (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker);
<link linkend="void">void</link>                <link linkend="polkit-tracker-unref">polkit_tracker_unref</link>                (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker);
<link linkend="void">void</link>                <link linkend="polkit-tracker-set-system-bus-connection">polkit_tracker_set_system_bus_connection</link>
                                                        (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="DBusConnection">DBusConnection</link> *con);
<link linkend="void">void</link>                <link linkend="polkit-tracker-init">polkit_tracker_init</link>                 (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-tracker-dbus-func">polkit_tracker_dbus_func</link>            (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="DBusMessage">DBusMessage</link> *message);
<link linkend="PolKitCaller">PolKitCaller</link>*       <link linkend="polkit-tracker-get-caller-from-dbus-name">polkit_tracker_get_caller_from_dbus_name</link>
                                                        (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         const <link linkend="char">char</link> *dbus_name,
                                                         <link linkend="DBusError">DBusError</link> *error);
<link linkend="PolKitCaller">PolKitCaller</link>*       <link linkend="polkit-tracker-get-caller-from-pid">polkit_tracker_get_caller_from_pid</link>  (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="pid-t">pid_t</link> pid,
                                                         <link linkend="DBusError">DBusError</link> *error);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-tracker-is-authorization-relevant">polkit_tracker_is_authorization_relevant</link>
                                                        (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="DBusError">DBusError</link> *error);
</synopsis>
</refsynopsisdiv>









<refsect1 id="polkit-polkit-dbus.description" role="desc">
<title role="desc.title">Description</title>
<para>
Helper library for obtaining seat, session and caller information
via D-Bus and ConsoleKit. This library is only useful when writing
a mechanism. 
</para>
<para>
If the mechanism itself is a daemon exposing a remote services via
the system message bus it's often a better idea, to reduce
roundtrips, to use the high-level <link linkend="PolKitTracker"><type>PolKitTracker</type></link> class rather than
the low-level functions <link linkend="polkit-caller-new-from-dbus-name"><function>polkit_caller_new_from_dbus_name()</function></link> and
<link linkend="polkit-caller-new-from-pid"><function>polkit_caller_new_from_pid()</function></link>.
</para>
<para>
These functions are in <literal>libpolkit-dbus</literal>.</para>
<para>

</para>
</refsect1>

<refsect1 id="polkit-polkit-dbus.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="polkit-session-new-from-objpath" role="function">
<title>polkit_session_new_from_objpath ()</title>
<indexterm zone="polkit-session-new-from-objpath"><primary>polkit_session_new_from_objpath</primary></indexterm><programlisting><link linkend="PolKitSession">PolKitSession</link>*      polkit_session_new_from_objpath     (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         const <link linkend="char">char</link> *objpath,
                                                         <link linkend="uid-t">uid_t</link> uid,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
This function will construct a <link linkend="PolKitSession"><type>PolKitSession</type></link> object by querying
the ConsoleKit daemon for information. Note that this will do a lot
of blocking IO so it is best avoided if your process already
tracks/caches all the information. If you pass in <parameter>uid</parameter> as a
non-negative number, a round trip can be saved.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>con</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus system bus connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>objpath</parameter>&nbsp;:</term>
<listitem><simpara> object path of ConsoleKit session object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>uid</parameter>&nbsp;:</term>
<listitem><simpara> the user owning the session or -1 if unknown
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new object or <link linkend="NULL:CAPS"><type>NULL</type></link> if an error occured (in which case
<parameter>error</parameter> will be set)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-session-new-from-cookie" role="function">
<title>polkit_session_new_from_cookie ()</title>
<indexterm zone="polkit-session-new-from-cookie"><primary>polkit_session_new_from_cookie</primary></indexterm><programlisting><link linkend="PolKitSession">PolKitSession</link>*      polkit_session_new_from_cookie      (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         const <link linkend="char">char</link> *cookie,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
This function will construct a <link linkend="PolKitSession"><type>PolKitSession</type></link> object by querying
the ConsoleKit daemon for information. Note that this will do a lot
of blocking IO so it is best avoided if your process already
tracks/caches all the information.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>con</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus system bus connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cookie</parameter>&nbsp;:</term>
<listitem><simpara> a ConsoleKit XDG_SESSION_COOKIE
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new object or <link linkend="NULL:CAPS"><type>NULL</type></link> if an error occured (in which case
<parameter>error</parameter> will be set)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-caller-new-from-dbus-name" role="function">
<title>polkit_caller_new_from_dbus_name ()</title>
<indexterm zone="polkit-caller-new-from-dbus-name"><primary>polkit_caller_new_from_dbus_name</primary></indexterm><programlisting><link linkend="PolKitCaller">PolKitCaller</link>*       polkit_caller_new_from_dbus_name    (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         const <link linkend="char">char</link> *dbus_name,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
This function will construct a <link linkend="PolKitCaller"><type>PolKitCaller</type></link> object by querying
both the system bus daemon and the ConsoleKit daemon for
information. Note that this will do a lot of blocking IO so it is
best avoided if your process already tracks/caches all the
information. You can use the <link linkend="PolKitTracker"><type>PolKitTracker</type></link> class for this.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>con</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus system bus connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dbus_name</parameter>&nbsp;:</term>
<listitem><simpara> unique system bus connection name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new object or <link linkend="NULL:CAPS"><type>NULL</type></link> if an error occured (in which case
<parameter>error</parameter> will be set)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-caller-new-from-pid" role="function">
<title>polkit_caller_new_from_pid ()</title>
<indexterm zone="polkit-caller-new-from-pid"><primary>polkit_caller_new_from_pid</primary></indexterm><programlisting><link linkend="PolKitCaller">PolKitCaller</link>*       polkit_caller_new_from_pid          (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         <link linkend="pid-t">pid_t</link> pid,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
This function will construct a <link linkend="PolKitCaller"><type>PolKitCaller</type></link> object by querying
both information in /proc (on Linux) and the ConsoleKit daemon for
information about a given process. Note that this will do a lot of
blocking IO so it is best avoided if your process already
tracks/caches all the information. You can use the <link linkend="PolKitTracker"><type>PolKitTracker</type></link>
class for this.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>con</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus system bus connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pid</parameter>&nbsp;:</term>
<listitem><simpara> process id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new object or <link linkend="NULL:CAPS"><type>NULL</type></link> if an error occured (in which case
<parameter>error</parameter> will be set)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-is-authorization-relevant" role="function" condition="since:0.7">
<title>polkit_is_authorization_relevant ()</title>
<indexterm zone="polkit-is-authorization-relevant" role="0.7"><primary>polkit_is_authorization_relevant</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_is_authorization_relevant    (<link linkend="DBusConnection">DBusConnection</link> *con,
                                                         <link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
As explicit authorizations are scoped (process single shot,
process, session or everything), they become irrelevant once the
entity (process or session) ceases to exist. This function
determines whether the authorization is still relevant; it's useful
for reporting and graphical tools displaying authorizations.
</para>
<para>
Note that this may do blocking IO to check for session
authorizations so it is best avoided if your process already
tracks/caches all the information. You can use the
<link linkend="polkit-tracker-is-authorization-relevant"><function>polkit_tracker_is_authorization_relevant()</function></link> method on the
<link linkend="PolKitTracker"><type>PolKitTracker</type></link> class for this.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>con</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus system bus connection
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> authorization to check for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> return location for error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> if the authorization still applies, <link linkend="FALSE:CAPS"><type>FALSE</type></link> if an
error occurred (then error will be set) or if the entity the
authorization refers to has gone out of scope.

This function is in <literal>libpolkit-dbus</literal>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="PolKitTracker" role="struct">
<title>PolKitTracker</title>
<indexterm zone="PolKitTracker"><primary>PolKitTracker</primary></indexterm><programlisting>typedef struct _PolKitTracker PolKitTracker;</programlisting>
<para>
Instances of this class are used to cache information about
callers; typically this is used in scenarios where the same caller
is calling into a mechanism multiple times. 
</para>
<para>
Thus, an application can use this class to get the <link linkend="PolKitCaller"><type>PolKitCaller</type></link>
object; the class will listen to both NameOwnerChanged and
ActivityChanged signals from the message bus and update / retire
the <link linkend="PolKitCaller"><type>PolKitCaller</type></link> objects.
</para>
<para>
An example of how to use <link linkend="PolKitTracker"><type>PolKitTracker</type></link> is provided here. First, build the following program
</para>
<para>
<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../examples/tracker-example/tracker-example.c" parse="text"><xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback></xi:include></programlisting>
</para>
<para>
with
</para>
<para>
<programlisting>gcc -o tracker-example `pkg-config --cflags --libs dbus-glib-1 polkit-dbus` tracker-example.c</programlisting>
</para>
<para>
Then put the following content
</para>
<para>
<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../examples/tracker-example/dk.fubar.PolKitTestService.conf" parse="text"><xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback></xi:include></programlisting>
</para>
<para>
in the file <literal>/etc/dbus-1/system.d/dk.fubar.PolKitTestService.conf</literal>. Finally,
create a small Python client like this
</para>
<para>
<programlisting><xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="../../examples/tracker-example/tracker-example-client.py" parse="text"><xi:fallback>FIXME: MISSING XINCLUDE CONTENT</xi:fallback></xi:include></programlisting>
</para>
<para>
as <literal>tracker-example-client.py</literal>. Now, run <literal>tracker-example</literal>
in one window and <literal>tracker-example-client</literal> in another. The output of
the former should look like this
</para>
<para>
<programlisting>
18:20:00.414: PolKitCaller: refcount=1 dbus_name=:1.473 uid=500 pid=8636 selinux_context=system_u:system_r:unconfined_t
18:20:00.414: PolKitSession: refcount=1 uid=0 objpath=/org/freedesktop/ConsoleKit/Session1 is_active=1 is_local=1 remote_host=(null)
18:20:00.414: PolKitSeat: refcount=1 objpath=/org/freedesktop/ConsoleKit/Seat1

18:20:01.424: PolKitCaller: refcount=1 dbus_name=:1.473 uid=500 pid=8636 selinux_context=system_u:system_r:unconfined_t
18:20:01.424: PolKitSession: refcount=1 uid=0 objpath=/org/freedesktop/ConsoleKit/Session1 is_active=1 is_local=1 remote_host=(null)
18:20:01.424: PolKitSeat: refcount=1 objpath=/org/freedesktop/ConsoleKit/Seat1

18:20:02.434: PolKitCaller: refcount=1 dbus_name=:1.473 uid=500 pid=8636 selinux_context=system_u:system_r:unconfined_t
18:20:02.434: PolKitSession: refcount=1 uid=0 objpath=/org/freedesktop/ConsoleKit/Session1 is_active=0 is_local=1 remote_host=(null)
18:20:02.434: PolKitSeat: refcount=1 objpath=/org/freedesktop/ConsoleKit/Seat1

18:20:03.445: PolKitCaller: refcount=1 dbus_name=:1.473 uid=500 pid=8636 selinux_context=system_u:system_r:unconfined_t
18:20:03.445: PolKitSession: refcount=1 uid=0 objpath=/org/freedesktop/ConsoleKit/Session1 is_active=1 is_local=1 remote_host=(null)
18:20:03.445: PolKitSeat: refcount=1 objpath=/org/freedesktop/ConsoleKit/Seat1
</programlisting>
</para>
<para>
The point of the test program is simply to gather caller
information about clients (the small Python program, you may launch
multiple instances of it) that repeatedly calls into the D-Bus
service; if one runs <literal>strace(1)</literal> in front of the
test program one will notice that there is only syscall / IPC
overhead (except for printing to stdout) on the first call from the
client.
</para>
<para>
The careful reader will notice that, during the testing session, we
did a quick VT switch away from the session (and back) which is
reflected in the output.
</para>
<para>
These functions are in <literal>libpolkit-dbus</literal>.</para>
<para>

</para></refsect2>
<refsect2 id="polkit-tracker-new" role="function" condition="since:0.7">
<title>polkit_tracker_new ()</title>
<indexterm zone="polkit-tracker-new" role="0.7"><primary>polkit_tracker_new</primary></indexterm><programlisting><link linkend="PolKitTracker">PolKitTracker</link>*      polkit_tracker_new                  (void);</programlisting>
<para>
Creates a new <link linkend="PolKitTracker"><type>PolKitTracker</type></link> object.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the new object

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-ref" role="function" condition="since:0.7">
<title>polkit_tracker_ref ()</title>
<indexterm zone="polkit-tracker-ref" role="0.7"><primary>polkit_tracker_ref</primary></indexterm><programlisting><link linkend="PolKitTracker">PolKitTracker</link>*      polkit_tracker_ref                  (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker);</programlisting>
<para>
Increase reference count.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the object

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-unref" role="function" condition="since:0.7">
<title>polkit_tracker_unref ()</title>
<indexterm zone="polkit-tracker-unref" role="0.7"><primary>polkit_tracker_unref</primary></indexterm><programlisting><link linkend="void">void</link>                polkit_tracker_unref                (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker);</programlisting>
<para>
Decreases the reference count of the object. If it becomes zero,
the object is freed. Before freeing, reference counts on embedded
objects are decresed by one.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker object
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-set-system-bus-connection" role="function" condition="since:0.7">
<title>polkit_tracker_set_system_bus_connection ()</title>
<indexterm zone="polkit-tracker-set-system-bus-connection" role="0.7"><primary>polkit_tracker_set_system_bus_connection</primary></indexterm><programlisting><link linkend="void">void</link>                polkit_tracker_set_system_bus_connection
                                                        (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="DBusConnection">DBusConnection</link> *con);</programlisting>
<para>
Tell the <link linkend="PolKitTracker"><type>PolKitTracker</type></link> object to use the given D-Bus connection
when it needs to fetch information from the system message bus and
ConsoleKit services. This is used for priming the cache.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>con</parameter>&nbsp;:</term>
<listitem><simpara> the connection to the system message bus
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-init" role="function" condition="since:0.7">
<title>polkit_tracker_init ()</title>
<indexterm zone="polkit-tracker-init" role="0.7"><primary>polkit_tracker_init</primary></indexterm><programlisting><link linkend="void">void</link>                polkit_tracker_init                 (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker);</programlisting>
<para>
Initialize the tracker.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker object
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-dbus-func" role="function" condition="since:0.7">
<title>polkit_tracker_dbus_func ()</title>
<indexterm zone="polkit-tracker-dbus-func" role="0.7"><primary>polkit_tracker_dbus_func</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_tracker_dbus_func            (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="DBusMessage">DBusMessage</link> *message);</programlisting>
<para>
The owner of the <link linkend="PolKitTracker"><type>PolKitTracker</type></link> object must pass signals from the
system message bus (just NameOwnerChanged will do) and all signals
from the ConsoleKit service into this function.
</para>
<para>
This function is in <literal>libpolkit-dbus</literal>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>message</parameter>&nbsp;:</term>
<listitem><simpara> message to pass
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> only if there was a change in the ConsoleKit database.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-get-caller-from-dbus-name" role="function" condition="since:0.7">
<title>polkit_tracker_get_caller_from_dbus_name ()</title>
<indexterm zone="polkit-tracker-get-caller-from-dbus-name" role="0.7"><primary>polkit_tracker_get_caller_from_dbus_name</primary></indexterm><programlisting><link linkend="PolKitCaller">PolKitCaller</link>*       polkit_tracker_get_caller_from_dbus_name
                                                        (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         const <link linkend="char">char</link> *dbus_name,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
This function is similar to <link linkend="polkit-caller-new-from-dbus-name"><function>polkit_caller_new_from_dbus_name()</function></link>
except that it uses the cache in <link linkend="PolKitTracker"><type>PolKitTracker</type></link>. So on the second
and subsequent calls, for the same D-Bus name, there will be no
syscall or IPC overhead in calling this function.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dbus_name</parameter>&nbsp;:</term>
<listitem><simpara> unique name on the system message bus
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="PolKitCaller"><type>PolKitCaller</type></link> object; the caller must use
<link linkend="polkit-caller-unref"><function>polkit_caller_unref()</function></link> on the object when done with it. Returns
<link linkend="NULL:CAPS"><type>NULL</type></link> if an error occured (in which case error will be set).

This function is in <literal>libpolkit-dbus</literal>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-get-caller-from-pid" role="function" condition="since:0.7">
<title>polkit_tracker_get_caller_from_pid ()</title>
<indexterm zone="polkit-tracker-get-caller-from-pid" role="0.7"><primary>polkit_tracker_get_caller_from_pid</primary></indexterm><programlisting><link linkend="PolKitCaller">PolKitCaller</link>*       polkit_tracker_get_caller_from_pid  (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="pid-t">pid_t</link> pid,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
This function is similar to <link linkend="polkit-caller-new-from-pid"><function>polkit_caller_new_from_pid()</function></link>
except that it uses the cache in <link linkend="PolKitTracker"><type>PolKitTracker</type></link>. So on the second
and subsequent calls, for the same D-Bus name, there will be no
IPC overhead in calling this function. 
</para>
<para>
There will be some syscall overhead to lookup the time when the
given process is started (on Linux, looking up /proc/$pid/stat);
this is needed because pid's can be recycled and the cache thus
needs to record this in addition to the pid.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pid</parameter>&nbsp;:</term>
<listitem><simpara> UNIX process id to look at
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> D-Bus error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> A <link linkend="PolKitCaller"><type>PolKitCaller</type></link> object; the caller must use
<link linkend="polkit-caller-unref"><function>polkit_caller_unref()</function></link> on the object when done with it. Returns
<link linkend="NULL:CAPS"><type>NULL</type></link> if an error occured (in which case error will be set).

This function is in <literal>libpolkit-dbus</literal>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-tracker-is-authorization-relevant" role="function" condition="since:0.7">
<title>polkit_tracker_is_authorization_relevant ()</title>
<indexterm zone="polkit-tracker-is-authorization-relevant" role="0.7"><primary>polkit_tracker_is_authorization_relevant</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_tracker_is_authorization_relevant
                                                        (<link linkend="PolKitTracker">PolKitTracker</link> *pk_tracker,
                                                         <link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="DBusError">DBusError</link> *error);</programlisting>
<para>
As explicit authorizations are scoped (process single shot,
process, session or everything), they become irrelevant once the
entity (process or session) ceases to exist. This function
determines whether the authorization is still relevant; it's useful
for reporting and graphical tools displaying authorizations.
</para>
<para>
This function is similar to <link linkend="polkit-is-authorization-relevant"><function>polkit_is_authorization_relevant()</function></link> only
that it avoids IPC overhead on the 2nd and subsequent calls when
checking authorizations scoped for a session.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pk_tracker</parameter>&nbsp;:</term>
<listitem><simpara> the tracker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> authorization to check for
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> return location for error
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> if the authorization still applies, <link linkend="FALSE:CAPS"><type>FALSE</type></link> if an
error occurred (then error will be set) or if the entity the
authorization refers to has gone out of scope.

This function is in <literal>libpolkit-dbus</literal>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>

</refsect1>




</refentry>
