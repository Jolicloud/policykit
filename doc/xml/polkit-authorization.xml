<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="polkit-polkit-authorization">
<refmeta>
<refentrytitle role="top_of_page" id="polkit-polkit-authorization.top_of_page">Authorization Entry</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>POLKIT Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Authorization Entry</refname>
<refpurpose>An entry in the autothorization database</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="polkit-polkit-authorization.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="PolKitAuthorization">PolKitAuthorization</link>;
<link linkend="PolKitAuthorization">PolKitAuthorization</link>* <link linkend="polkit-authorization-ref">polkit_authorization_ref</link>           (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="void">void</link>                <link linkend="polkit-authorization-unref">polkit_authorization_unref</link>          (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="void">void</link>                <link linkend="polkit-authorization-debug">polkit_authorization_debug</link>          (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-authorization-validate">polkit_authorization_validate</link>       (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
enum                <link linkend="PolKitAuthorizationScope">PolKitAuthorizationScope</link>;
enum                <link linkend="PolKitAuthorizationType">PolKitAuthorizationType</link>;
<link linkend="PolKitAuthorizationType">PolKitAuthorizationType</link> <link linkend="polkit-authorization-type">polkit_authorization_type</link>       (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
const <link linkend="char">char</link>*         <link linkend="polkit-authorization-get-action-id">polkit_authorization_get_action_id</link>  (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="uid-t">uid_t</link>               <link linkend="polkit-authorization-get-uid">polkit_authorization_get_uid</link>        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="time-t">time_t</link>              <link linkend="polkit-authorization-get-time-of-grant">polkit_authorization_get_time_of_grant</link>
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="PolKitAuthorizationScope">PolKitAuthorizationScope</link> <link linkend="polkit-authorization-get-scope">polkit_authorization_get_scope</link> (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-authorization-scope-process-get-pid">polkit_authorization_scope_process_get_pid</link>
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="pid-t">pid_t</link> *out_pid,
                                                         <link linkend="polkit-uint64-t">polkit_uint64_t</link> *out_pid_start_time);
const <link linkend="char">char</link>*         <link linkend="polkit-authorization-scope-session-get-ck-objref">polkit_authorization_scope_session_get_ck_objref</link>
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-authorization-was-granted-via-defaults">polkit_authorization_was_granted_via_defaults</link>
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="uid-t">uid_t</link> *out_user_authenticated_as);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-authorization-was-granted-explicitly">polkit_authorization_was_granted_explicitly</link>
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="uid-t">uid_t</link> *out_by_whom,
                                                         <link linkend="polkit-bool-t">polkit_bool_t</link> *out_is_negative);
<link linkend="polkit-bool-t">polkit_bool_t</link>       (<link linkend="PolKitAuthorizationConstraintsForeachFunc">*PolKitAuthorizationConstraintsForeachFunc</link>)
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="PolKitAuthorizationConstraint">PolKitAuthorizationConstraint</link> *authc,
                                                         <link linkend="void">void</link> *user_data);
<link linkend="polkit-bool-t">polkit_bool_t</link>       <link linkend="polkit-authorization-constraints-foreach">polkit_authorization_constraints_foreach</link>
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="PolKitAuthorizationConstraintsForeachFunc">PolKitAuthorizationConstraintsForeachFunc</link> cb,
                                                         <link linkend="void">void</link> *user_data);
</synopsis>
</refsynopsisdiv>









<refsect1 id="polkit-polkit-authorization.description" role="desc">
<title role="desc.title">Description</title>
<para>
This class is used to represent entries in the authorization
database.</para>
<para>

</para>
</refsect1>

<refsect1 id="polkit-polkit-authorization.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="PolKitAuthorization" role="struct" condition="since:0.7">
<title>PolKitAuthorization</title>
<indexterm zone="PolKitAuthorization" role="0.7"><primary>PolKitAuthorization</primary></indexterm><programlisting>typedef struct _PolKitAuthorization PolKitAuthorization;</programlisting>
<para>
Objects of this class are used to represent entries in the
authorization database.</para>
<para>

</para><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-ref" role="function" condition="since:0.7">
<title>polkit_authorization_ref ()</title>
<indexterm zone="polkit-authorization-ref" role="0.7"><primary>polkit_authorization_ref</primary></indexterm><programlisting><link linkend="PolKitAuthorization">PolKitAuthorization</link>* polkit_authorization_ref           (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Increase reference count.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the authorization object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the object

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-unref" role="function" condition="since:0.7">
<title>polkit_authorization_unref ()</title>
<indexterm zone="polkit-authorization-unref" role="0.7"><primary>polkit_authorization_unref</primary></indexterm><programlisting><link linkend="void">void</link>                polkit_authorization_unref          (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Decreases the reference count of the object. If it becomes zero,
the object is freed. Before freeing, reference counts on embedded
objects are decresed by one.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the authorization object
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-debug" role="function" condition="since:0.7">
<title>polkit_authorization_debug ()</title>
<indexterm zone="polkit-authorization-debug" role="0.7"><primary>polkit_authorization_debug</primary></indexterm><programlisting><link linkend="void">void</link>                polkit_authorization_debug          (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Print debug details</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-validate" role="function" condition="since:0.7">
<title>polkit_authorization_validate ()</title>
<indexterm zone="polkit-authorization-validate" role="0.7"><primary>polkit_authorization_validate</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_authorization_validate       (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Validate the object</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> iff the object is valid.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="PolKitAuthorizationScope" role="enum" condition="since:0.7">
<title>enum PolKitAuthorizationScope</title>
<indexterm zone="PolKitAuthorizationScope" role="0.7"><primary>PolKitAuthorizationScope</primary></indexterm><programlisting>typedef enum {
        POLKIT_AUTHORIZATION_SCOPE_PROCESS_ONE_SHOT,
        POLKIT_AUTHORIZATION_SCOPE_PROCESS,
        POLKIT_AUTHORIZATION_SCOPE_SESSION,
        POLKIT_AUTHORIZATION_SCOPE_ALWAYS,
} PolKitAuthorizationScope;
</programlisting>
<para>
The scope of an authorization; e.g. whether it's limited to a
process, a session or unlimited.</para>
<para>

</para><variablelist role="enum">
<varlistentry id="POLKIT-AUTHORIZATION-SCOPE-PROCESS-ONE-SHOT:CAPS" role="constant">
<term><literal>POLKIT_AUTHORIZATION_SCOPE_PROCESS_ONE_SHOT</literal></term>
<listitem><simpara> The authorization is
limited for a single shot for a single process on the system
</simpara></listitem>
</varlistentry>
<varlistentry id="POLKIT-AUTHORIZATION-SCOPE-PROCESS:CAPS" role="constant">
<term><literal>POLKIT_AUTHORIZATION_SCOPE_PROCESS</literal></term>
<listitem><simpara> The authorization is limited
for a single process on the system
</simpara></listitem>
</varlistentry>
<varlistentry id="POLKIT-AUTHORIZATION-SCOPE-SESSION:CAPS" role="constant">
<term><literal>POLKIT_AUTHORIZATION_SCOPE_SESSION</literal></term>
<listitem><simpara> The authorization is limited
for processes originating from a given session
</simpara></listitem>
</varlistentry>
<varlistentry id="POLKIT-AUTHORIZATION-SCOPE-ALWAYS:CAPS" role="constant">
<term><literal>POLKIT_AUTHORIZATION_SCOPE_ALWAYS</literal></term>
<listitem><simpara> The authorization is retained
indefinitely.
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="PolKitAuthorizationType" role="enum" condition="since:0.7">
<title>enum PolKitAuthorizationType</title>
<indexterm zone="PolKitAuthorizationType" role="0.7"><primary>PolKitAuthorizationType</primary></indexterm><programlisting>typedef enum {
        POLKIT_AUTHORIZATION_TYPE_UID,
} PolKitAuthorizationType;
</programlisting>
<para>
The type of authorization; e.g. whether it applies to a user,
group, security context and so on (right now only users are
supported).</para>
<para>

</para><variablelist role="enum">
<varlistentry id="POLKIT-AUTHORIZATION-TYPE-UID:CAPS" role="constant">
<term><literal>POLKIT_AUTHORIZATION_TYPE_UID</literal></term>
<listitem><simpara> The authorization is for a UNIX user
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-type" role="function" condition="since:0.7">
<title>polkit_authorization_type ()</title>
<indexterm zone="polkit-authorization-type" role="0.7"><primary>polkit_authorization_type</primary></indexterm><programlisting><link linkend="PolKitAuthorizationType">PolKitAuthorizationType</link> polkit_authorization_type       (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Determine the type of authorization.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the authorization object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the authorization type 

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-get-action-id" role="function" condition="since:0.7">
<title>polkit_authorization_get_action_id ()</title>
<indexterm zone="polkit-authorization-get-action-id" role="0.7"><primary>polkit_authorization_get_action_id</primary></indexterm><programlisting>const <link linkend="char">char</link>*         polkit_authorization_get_action_id  (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Get the action this authorization is for</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the action id. Caller should not free this string.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-get-uid" role="function" condition="since:0.7">
<title>polkit_authorization_get_uid ()</title>
<indexterm zone="polkit-authorization-get-uid" role="0.7"><primary>polkit_authorization_get_uid</primary></indexterm><programlisting><link linkend="uid-t">uid_t</link>               polkit_authorization_get_uid        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Gets the UNIX user id for the user the authorization is confined
to.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> The UNIX user id for whom the authorization is confied to

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-get-time-of-grant" role="function" condition="since:0.7">
<title>polkit_authorization_get_time_of_grant ()</title>
<indexterm zone="polkit-authorization-get-time-of-grant" role="0.7"><primary>polkit_authorization_get_time_of_grant</primary></indexterm><programlisting><link linkend="time-t">time_t</link>              polkit_authorization_get_time_of_grant
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Returns the point in time the authorization was granted. The value
is UNIX time, e.g. number of seconds since the Epoch Jan 1, 1970
0:00 UTC.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> When authorization was granted

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-get-scope" role="function" condition="since:0.7">
<title>polkit_authorization_get_scope ()</title>
<indexterm zone="polkit-authorization-get-scope" role="0.7"><primary>polkit_authorization_get_scope</primary></indexterm><programlisting><link linkend="PolKitAuthorizationScope">PolKitAuthorizationScope</link> polkit_authorization_get_scope (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Get the scope of the authorization; e.g. whether it's confined to a
single process, a single session or can be retained
indefinitely. Also keep in mind that an authorization is subject to
constraints, see <link linkend="polkit-authorization-constraints-foreach"><function>polkit_authorization_constraints_foreach()</function></link> for
details.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> the scope

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-scope-process-get-pid" role="function" condition="since:0.7">
<title>polkit_authorization_scope_process_get_pid ()</title>
<indexterm zone="polkit-authorization-scope-process-get-pid" role="0.7"><primary>polkit_authorization_scope_process_get_pid</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_authorization_scope_process_get_pid
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="pid-t">pid_t</link> *out_pid,
                                                         <link linkend="polkit-uint64-t">polkit_uint64_t</link> *out_pid_start_time);</programlisting>
<para>
If scope is <link linkend="POLKIT-AUTHORIZATION-SCOPE-PROCESS-ONE-SHOT:CAPS"><type>POLKIT_AUTHORIZATION_SCOPE_PROCESS_ONE_SHOT</type></link> or
<link linkend="POLKIT-AUTHORIZATION-SCOPE-PROCESS:CAPS"><type>POLKIT_AUTHORIZATION_SCOPE_PROCESS</type></link>, get information about what
process the authorization is confined to. 
</para>
<para>
As process identifiers can be recycled, the start time of the
process (the unit is not well-defined; on Linux it's the number of
milliseconds since the system was started) is also returned.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_pid</parameter>&nbsp;:</term>
<listitem><simpara> return location
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_pid_start_time</parameter>&nbsp;:</term>
<listitem><simpara> return location
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> if information was returned

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-scope-session-get-ck-objref" role="function" condition="since:0.7">
<title>polkit_authorization_scope_session_get_ck_objref ()</title>
<indexterm zone="polkit-authorization-scope-session-get-ck-objref" role="0.7"><primary>polkit_authorization_scope_session_get_ck_objref</primary></indexterm><programlisting>const <link linkend="char">char</link>*         polkit_authorization_scope_session_get_ck_objref
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth);</programlisting>
<para>
Gets the ConsoleKit object path for the session the authorization
is confined to.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="NULL:CAPS"><type>NULL</type></link> if scope wasn't session

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-was-granted-via-defaults" role="function" condition="since:0.7">
<title>polkit_authorization_was_granted_via_defaults ()</title>
<indexterm zone="polkit-authorization-was-granted-via-defaults" role="0.7"><primary>polkit_authorization_was_granted_via_defaults</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_authorization_was_granted_via_defaults
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="uid-t">uid_t</link> *out_user_authenticated_as);</programlisting>
<para>
Determine if the authorization was obtained by the user by
authenticating as himself or an administrator via the the
"defaults" section in the <literal>.policy</literal> file for the
action (e.g.  "allow_any", "allow_inactive", "allow_active"). 
</para>
<para>
Compare with <link linkend="polkit-authorization-was-granted-explicitly"><function>polkit_authorization_was_granted_explicitly()</function></link> - only
one of these functions can return <link linkend="TRUE:CAPS"><type>TRUE</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_user_authenticated_as</parameter>&nbsp;:</term>
<listitem><simpara> return location
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> if the authorization was obtained by the user
himself authenticating.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="polkit-authorization-was-granted-explicitly" role="function" condition="since:0.7">
<title>polkit_authorization_was_granted_explicitly ()</title>
<indexterm zone="polkit-authorization-was-granted-explicitly" role="0.7"><primary>polkit_authorization_was_granted_explicitly</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_authorization_was_granted_explicitly
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="uid-t">uid_t</link> *out_by_whom,
                                                         <link linkend="polkit-bool-t">polkit_bool_t</link> *out_is_negative);</programlisting>
<para>
Determine if the authorization was explicitly granted by a
sufficiently privileged user.
</para>
<para>
Compare with <link linkend="polkit-authorization-was-granted-via-defaults"><function>polkit_authorization_was_granted_via_defaults()</function></link> - only
one of these functions can return <link linkend="TRUE:CAPS"><type>TRUE</type></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_by_whom</parameter>&nbsp;:</term>
<listitem><simpara> return location
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_is_negative</parameter>&nbsp;:</term>
<listitem><simpara> return location
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><type>TRUE</type></link> if the authorization was explicitly granted by a
sufficiently privileger user. If <link linkend="TRUE:CAPS"><literal>TRUE</literal></link>, the user who granted the
authorization is returned in <link linkend="out-by-whom"><literal>out_by_whom</literal></link>. If the authorization is
negative, <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> is returned in <link linkend="out-is-negative"><literal>out_is_negative</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>
<refsect2 id="PolKitAuthorizationConstraintsForeachFunc" role="function">
<title>PolKitAuthorizationConstraintsForeachFunc ()</title>
<indexterm zone="PolKitAuthorizationConstraintsForeachFunc"><primary>PolKitAuthorizationConstraintsForeachFunc</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       (*PolKitAuthorizationConstraintsForeachFunc)
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="PolKitAuthorizationConstraint">PolKitAuthorizationConstraint</link> *authc,
                                                         <link linkend="void">void</link> *user_data);</programlisting>
<para>
Callback function for <link linkend="polkit-authorization-constraints-foreach"><function>polkit_authorization_constraints_foreach()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> authorization
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>authc</parameter>&nbsp;:</term>
<listitem><simpara> authorization constraint
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> Pass <link linkend="TRUE:CAPS"><type>TRUE</type></link> to short-circuit, e.g. stop the iteration
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="polkit-authorization-constraints-foreach" role="function" condition="since:0.7">
<title>polkit_authorization_constraints_foreach ()</title>
<indexterm zone="polkit-authorization-constraints-foreach" role="0.7"><primary>polkit_authorization_constraints_foreach</primary></indexterm><programlisting><link linkend="polkit-bool-t">polkit_bool_t</link>       polkit_authorization_constraints_foreach
                                                        (<link linkend="PolKitAuthorization">PolKitAuthorization</link> *auth,
                                                         <link linkend="PolKitAuthorizationConstraintsForeachFunc">PolKitAuthorizationConstraintsForeachFunc</link> cb,
                                                         <link linkend="void">void</link> *user_data);</programlisting>
<para>
Iterate over all constraints associated with an authorization.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>auth</parameter>&nbsp;:</term>
<listitem><simpara> the object
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&nbsp;:</term>
<listitem><simpara> callback function
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara> user data
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> <link linkend="TRUE:CAPS"><literal>TRUE</literal></link> if the caller short-circuited the iteration.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.7
</para></refsect2>

</refsect1>




</refentry>
